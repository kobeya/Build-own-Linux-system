参阅<深入理解Linux内核>	第六章	定时测量
概要
	1，时钟与定时器电路
	2，Linux计时体系结构
	3，更新系统统计数
	4，软定时器和延迟函数
	5，与定时测量相关的系统调用


一、时钟和定时器电路
	1，时间戳timestamp
	2，实时时钟RTC
		在《Linux内核设计与实现》里面描述到，是一个微型电池和CMOS构成的RTC电路为核心，
		维护系统启动后的实际时间和墙上时间。

		这里增加了一些细节，RTC是怎么工作的，以及我们怎么操控RTC？

		答：RTC确实是有电池+COMS集成的一个独立小电路。
		RTC能周期性的在IRQ8这个中断线上发出中断信号，频率在2~8192HZ之间。
		我们可以通过/dev/rtc这个文件节点来对RTC进行编程，内核就会通过0x70 0x71这两个I/O
		端口，访问到RTC。

		RTC----IRQ8-----0x70 0x71----- CPU

	3，时间戳计数器 TSC Time Stamp Control
		我们在编译系统的时候，不会声明时钟信号的频率，因为这样我们就可以让Linux运行在任何
		时钟频率的CPU上了。
		这个点没有切底理解，CPU的频率与时钟信号的关联

	4，CPU实际频率在系统初始化期间完成，calibrate_tsc函数，通过计算5ms时间间隔内，所产生的时
	钟信号的个数来推导CPU的频率。


		外部振荡器--->时钟信号----CLK---->CPU中的计数器寄存器（时间戳寄存器TSC）
		请注意这里，时钟信号与系统定时器的区别，时钟信号，又称为震荡周期，
		是CPU执行指令的信号，系统定时器，是CPU处理程序的中断信号，完全两码事。


	5，到这里，可以总结一下，内核有什么时钟：
		A CPU运行时钟，这个是跟震荡电路有关
		B RTC时钟，这个跟实际时间，维护时间有关
		C 系统定时器，这个与PIC，时钟中断，节拍有关，当然，它的来源也是电子晶振分频
		
		它们之间的功能都不一样，系统定时器，也就是时钟中断，它的出现是基于电子晶振分频
		让可编程的中断控制芯片PIC发出控制系统所有活动的时间节拍。

		CPU运行时钟，只是震荡电路下CPU工作的频率，与系统定时器完全两码事。


	6，高精度事件定时器HPET
		在2.6版本已经支持HPET。


二、Linux计时体系结构 timekeeping architecture

	1，x86体系计时活动
		单处理器，所有的计时活动都是全局定时器来中断触发。
		多处理器，所有的普通活动都是全局定时器中断触发，但是具体的CPU活动，就由
		本地APIC定时器来触发。

	2，在32bit的体系结构中，jiffies被初始化为一个很大的值，它会在5分钟后溢出。
		正常，我们需要对这个溢出的bug做算法修正。
		为什么搞这个bug，是因为在编写内核代码的时候，我们希望对jiffies溢出做一个检测，
		如果不做检测，就会在开发阶段被及时的发现。


	3，xtime变量
		用来保存UTC纪年以来经过的秒数。

	4，uptime
		
		 14:38:53 up 2 days, 20:12,  1 user,  load average: 0.32, 0.37, 0.36
                                                                     |      |     |
	                                                          1分钟   5分钟 15分钟

			这条指令，可以看到内核在过去1、5、15分钟的平均负载。
			这条指令的原理是通过update_time在每个节拍都要计算处于
			TASK_RUNNING、TASK_UNINTERRUPTIBLE状态的进程数，更新平均负载
		
	5，监管内核代码

		








						 
	

