本文参考《Linux内核设计与实现》第11章	定时器与时间管理
大纲
	1，内核时间概念
	2，节拍率HZ
	3，jiffies
	4，硬时钟和定时器
	5，时钟中断处理程序
	6，实际时间
	7，定时器
	8，延迟执行



一、内核时间概念
	1，时间驱动事件，属于事件驱动的一种。
	2，系统时间需要做哪些事情？
		A 定时执行
		B 延迟执行
		C 运行时间
		D 当前系统时间日期等

	3，相对时间与绝对时间
		相对时间，比如5s后某个时间调度，则使用相对时间，相对现在，未来的5s
		绝对时间，需要计算已经流失的时间，起点时间等绝对时间。

	4，可编程硬件芯片，以固定频率产生中断，这个中断就是我们的定时器中断。

	5，节拍率 tick rate，系统定时器以某种频率触发时钟中断，这个频率是可编程的，称为节拍率。
		简单来说，节拍率就是系统定时器触发时钟中断的频率。
		也就是可编程硬件芯片触发时钟中断的频率。

	6，墙上时间，就是实际时间。


二、节拍率HZ
	1，系统定时器频率，也就是节拍率，是通过静态预处理定义的，在系统启动的时候按照HZ值对硬件设置。
		可以查看代码asm/param.h中可以看到用一个宏预定义系统节拍，
		x86-arm默认都是100，也就是10ms发生一次时钟中断。节拍率100HZ
		我们也可以修改这个HZ，比如设置到500,1000，但请注意，因为NTP和体系的原因，
		这些值并不是随意确定的，经过科学佐证，如果你想修改默认值，
		最好按照它们体系的标准来动态调整。


	2，系统定时器，也就是节拍率高低对系统的影响
		高节拍优势：
		A 时间驱动事件的解析度更高，比如一个事件需要10ms调度，但提高到1000HZ，只需要1ms
		B 准确率更好，因为时间驱动事件依赖时间周期，所以平均有半个时间周期的误差

		高HZ的劣势：
		A 增加系统性能的负荷，因为时钟中断也需要CPU处理
		B 增加功耗
		C 打乱cache等

	3，无节拍OS
		内核有一个配置选项CONFIG_HZ,可以设置这个选项，让系统的定时器动态调整，
		比如可以让系统在空闲的时候自动降低时钟节拍率，减少系统对时钟中断的处理，降低能耗。
		（这里就有一个能耗优化的考虑）


三、jiffies

	1，jiffies是一个全局变量，用来统计系统启动以来，系统定时器产生的所有时钟中断的总数。
		也就是系统启动以来，所有的节拍总数。（注意并不是说jiffies的值就等于系统节拍之和，
		这里只表明这个jiffies用来统计，并不是值就完全相等，因为这里涉及一个内核处理的问题）

	
	2，一般我们理解jiffies这个值的计算，是通过统计系统启动以来所有的节拍之和。
		但是实际上，这个jiffies的值是这样来处理的：
		首先，内核给jiffies赋予一个初值
		然后，引起jiffies不断溢出，捕获bug
		最后，想要得到实际的节拍率，需要做一个减法。


	3，unsigned long volatile jiffies;
		32bit,HZ=100,497天后溢出，HZ=1000,49.7天后溢出
		64bit,任何人都别指望会看到它溢出！

	4，jiffies回绕
		比如在32bit中，jiffies超出后，会回绕到0，再继续统计。
		这里如果你做一个超时的比较，有可能出现问题，也就是因为回绕后jiffies值可能变得很小了。
		内核提供了解决办法：
		定义了4个宏来帮助我们比较节拍计数，避免回绕而产生的bug。


	5，用户空间和HZ
		因为jiffies的值可以动态调整，这可能会影响用户空间一些墨守成规的接口的计数
		所以，实际上，包括我去看了下代码，发现确实是这么一回事，
		就是在涉及到用户空间计算时间的时候，会把jiffies值做一些转换，适配用户空间的计算。
		比如使用一个宏USER_HZ来比较节拍。


四、硬时钟和定时器

	1，除了上述的系统定时器外，还有一种计时设备：实时时钟。

	2，实时时钟，简单的说，就是我们电路板上的RTC电路，有个小电池，bios和实时时钟都在用。
		系统启动的时候，会读取RTC里面保存时间的一个xtime值，初始化墙上时间，
		后续就不会再去读这个xtime的值了，不过会定期更新一下xtime的值，保持同步。

	3，系统定时器的实现
		A 有些体系通过对电子晶振进行分频来实现
		B 有些体系通过一个衰减测量器，设置一个init，衰减到0，触发中断
		C x86体系，主要采用可编程中断时钟IC，PIC，直接初始化HZ


五、时钟中断处理程序
	
	1，时钟中断处理程序，可以划分两部分：体系相关、体系无关

	2，最低限度执行的工作：
		获取xtime_lock锁，访问jiffies_64和对墙上时间xtime进行保护
		需要时应答或者重新设置系统时钟
		。。。很多


	
	3，实际时间
		也就是墙上时间
		struct timespec xtime;
		
		struct timespec{
			_kernel_time_t tv_sec;
			long tv_nsec;
		};
		
		xtime.tv_sec以秒为单位，保存1970年1月1日 UTC以来经过的时间。
		这个起始时间，是Unix系统的纪年。

		读写这个xtime，需要获取xtime_lock的seqlock锁。

		xtime一般使用在更新墙上时间，不会很频繁使用，
		但有一个注意，就是在文件系统中修改某个文件的时候，会更新文件的时间戳，就需要xtime。
		也就是我们在文件系统中经过用到RTC中的xtime这个变量来更新时间戳。		

六、定时器
	
	1，这里需要注意一点：定时器不能用于硬实时任务
	定时器只能保证，定时器处理程序不会在定时器超时之前执行，并不能保证，定时器处理函数可以
	精确的在定时器超时那时刻执行，也就是说，有可能延误定时器的执行，比如在下一个节拍到来才会执行
		这就决定了，定时器不能用于硬实时任务。


	2，定时器竞争条件
		内核定时器的访问，修改，需要获取锁。

	3，定时器发生的中断，是一种软中断在下半部上下文。
		

	4，定时器的管理
		内核通过链表来存放当前所有的定时器。
		但是链表的操作对内核来说，性能不是很理想，
		所以，还采用了定时器超时时间分5个组，高效管理定时器。

七、延迟执行

	首先我们明确一点，我们无法保证实际延迟刚好等于指定的延迟时间。
	然后，我们还必须清楚，延迟工作，不应该在持有锁或者禁止中断的时候使用。
	
	1，忙等待，用于对精确率要求不高的情况，因为它的工作需要对应节拍的整数倍。

	2，短延迟，比节拍还短的延迟，所以不能使用jiffies的延迟统计。
		内核提供了可以处理ms、us、ns级别的延迟函数，注意这些函数都使用忙等待
		void udelay(unsigned long usecs);
		void ndelay(unsigned long nsecs);
		void mdelay(unsigned long msecs);

		1s = 1000ms = 1000 000 us;

		实现原理：

			1，内核知道，处理器1S内可以执行多少次循环
			我们处理器里面有一个值，BogoMIPS，用来表示给定时间内，忙循环执行的次数。
			mips，表示每秒处理百万条指令。

			实际上，bogomips，记录处理器在空闲的时候，速度有多快。

			然后我们udelay就是使用这个值来实现的。


	简单来说，我们内核通过一个cpu空闲执行忙等待循环此时的一个值来实现一些udelay级别的低延迟
	函数，这些函数很容易溢出，而且对性能影响很大，慎重使用。


	总结1，内核除了系统定时器的节拍HZ这种级别的计数，还有更加细小的，比如mips的统计量
		在我们系统启动的时候，比如打印的一个bogomips值，就是表示cpu空闲的时候执行忙循环
		次数的能力，这些统计量可以实现低延迟udelay级别的函数接口。


	那么有没有办法解决延迟执行函数占用CPU资源的方法？
	有，使用schedule_timeout函数

	3，schedule_timeout
	
		需要推后执行的时候，自我睡眠，让出CPU。
			
	

		
		
	




























	
		
