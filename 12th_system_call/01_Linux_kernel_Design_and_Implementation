本文主要参考《Linux内核设计与实现v3》

概述
	1，与内核通讯
	2，系统调用处理程序
	3，系统调用的实现
	4，系统调用上下文
	5，另外一章，新增一个系统调用（自己从零开始写一个系统调用）

一、与内核通讯
	1，系统调用的3个优势：
		1）抽象，用户空间与内核空间通讯的唯一合法入口（异常、陷入不合法，但也通过系统调用），
		系统调用抽象了硬件底层的细节，这样用户空间可以不关注硬件底层的细节实现，完全可以
		在用户空间，调用做好的接口来实现功能。
		2）保护，用户空间不关心也无法直接访问硬件资源，这样可以保护内核资源，提供更好的
		稳定性和安全性。
		3）高级，为多任务、虚拟化等机制提供了支持。

	2，昨晚翻了一下《高级Unix环境编程》第一章有一个圆画的不错，描述了GNU Linux系统的从内核到
		系统调用，再到C库或者shell，最后到应用程序的集合，应用程序访问内核只能通过系统调用，
		但是应用程序有三种方式可以访问系统调用：shell、C库、直接系统调用。


	3，举个例子，C应用程序常用到的printf
		printf -> C库中的printf -> C库中的write -> 系统调用write
		这个例子说明，应用程序调用C库中的API，最终也调用系统调用完成相关操作。

	4，系统调用绝大部分都有副作用，比如修改系统的状态等，但也有只是返回一些内核数据，比如getpid


	5，在我们调用一个无效的系统调用，或者这个系统调用被删除了，那么程序最终会调用一个特殊的系统
		调用，这个系统调用除了返回一个错误码，什么事情都不做。

	6，系统调用号
		每一个系统调用都有一个绑定终身的系统调用号，不能修改，就算这个系统调用没了，这个系统
		调用号，依然不能被其他系统调用所使用，否则就会引起程序崩溃。首先，在进程运行的时候，
		只通过保存在eax寄存器中的系统调用号来索引对应的系统调用服务例程，曾经用到这个系统调用
		号的程序，依然还在用，但是它如果变成其他的，别的应用程序就无法正常运行了。

	7，系统调用的性能
		这里之谈到Linux系统调用比其他很多操作系统的系统调用要高效，因为
		1）进出内核的上下文切换简约
		2）每个系统调用处理程序和它本身也很简洁


	8，系统调用处理程序
		1）首先在编译阶段分配一个系统调用号
		2）这系统调用号在调用服务例程的时候会触发一个软中断，通过int $0x80触发异常陷入内核态
		3）然后在内核态执行系统调用的服务例程，也就是系统调用处理程序。

		最新，现在x86平台，不用int 0x80了，用了个sysenter指令，后续再展开这点。

	9，整个系统调用总结：
		

		应用程序在调用Ｃ库中的ＡＰＩ的时候，实际上Ｃ库需要调用系统调用接口来完成，
		首先，编译的时候，就已经绑定一个软中断，通过sysenter的方式陷入内核（
		旧版本int 0x80指令触发，陷入内核，但是有优化空间），同时通过寄存器eax把系统调用号
		传递给内核，然后这个系统调用号，在３２ｂｉｔ系统中×４来计算在系统调用表中的偏移
		地址获得自己的系统调用处理程序。在６４位系统中就×８。这里再提一下，有些系统调用
		也需要传递自己的参数，这个也是通过ebx ecx　edx esi edi几个寄存器来完成。


	10，系统调用的实现
		
	11，系统调用上下文
		系统调用的上下文，就是该系统调用的进程的上下文，所以，可以睡眠、参与调度抢占。
		侧面也说明，这个系统调用是可以重入的。

	12，增加一个系统调用的流程：
		1)先在系统调用表中增加一个项，用宏定义一个调用号，这个号是按顺序的
		2)然后使用SYSCALL_DEFINE来定义一个系统调用处理函数
		3)因为自己编写，C库没有支持，所以只能用Linux本身提供的一组宏来直接访问系统调用	
		





