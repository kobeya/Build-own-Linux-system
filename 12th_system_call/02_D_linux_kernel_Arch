本文主要参考<深入Linux内核架构>

主题
	本文要想解决几个问题？
	1,系统控制权是怎么在应用程序与内核之间来回传递
	2,仔细考察内核源代码，描述用于从用户到内核的机制


书本笔记：

	1,GNU C库中大约有100MiB的代码。
	2,在我们运行一个应用程序的时候，可以使用strace打印出所有的系统调用过程，很多我们在显示
		看不到的系统调用，是基于应用程序启动和运行的框架代码生成的。
	3，POSIX Portable Operating System Interface for UNIX，UNIX可移植开放操作系统接口

	4，POSIX是一个标准，也是一堆接口的集合。

	5，前面我们知道，系统调用上下文是进程上下文，也就是可能睡眠，参与调度
		那么问题来了，如果在处于系统调用上下文，来一个信号，将会发生什么情况？

		答：Linux采用BSD的方案，用一个标志字段SA_RESTART，当信号到来，先处理信号处理函数，
		然后返回再重启被中断的系统调用，不需要检测系统调用的返回值。

	6，前面描述了参数传递的寄存器ebx ecx edx esi edi，这里也能看出，系统调用最多能传递5个参数

	7，所有的系统调用处理函数，都有一个，而且必须要有一个额外的限定词asmlinkage，这是一个汇编
		语言的宏，用来告诉编译器，从栈中读取它的参数。

	8，为什么系统调用需要分配一个系统调用号，这样做有什么优势？
	答：首先这样做，可以类似与一个控制中枢，在触发系统调用的过程中，会根据调用编号和一个静态表，
	使用与体系相关的汇编，分配到具体的处理函数，这样就跟中断处理一样，优化管理，优化系统结构，
	并且调用明朗。

	9，在IA系统中，使用汇编语言指令int $0x80来触发软中断128陷入内核态，根据eax中的系统调用号，
	在系统调用表中找到自己的程序。

	到这里，可以来个简单的总结整个系统调用的过程：
		1）应用程序在编译的时候就根据调用的C库或者直接调用的宏或者shell来调用系统调用，
			执行的时候，首先把读取在用户栈中的参数，保存到寄存器中，
			通过汇编指令int $0x80触发软中断128陷入内核，并读取保存在
			寄存器eax中的系统调用号，然后在32位系统中*4字节，在64位系统中×8字节来
			计算自己在系统调用表中的偏移地址从而获取对应的系统调用处理程序。

		2）现在的处理器从奔腾2开始，就已经采用两条汇编指令来替代int $0x80，
			sysenter快速进入内核和sysexit退出内核态，这两条指令切换特权更快。
			着两条指令是处理器自带的，不需要程序员实现。

	10，为了不丢失int $0x80汇编指令触发软中断128陷入内核的兼容，现在的内核怎么处理？
	答：从书中找到的原话是这样的，内核将一个内存页面映射到地址空间的顶端( 0xffffe000 )。
		根据处理机类型的不同,该页上的系统调用代码可能包含int 0x80 或者 sysenter 。
		调用存储在该地址( 0xffffe000 )的代码使得标准库可以自动选择与使用的处理器相匹配的方法

		我目前理解为，为了做到兼容int 0x80指令，内核维护一个内存页，然后标准库根据不同的地址
		自动选择与它匹配的系统调用代码。

	11，除了sysenter int$0x80这些汇编指令外，其实还有一些针对特别的本机的两个方法，
		lcall7 lcall27,涉及到一些仿真的话题，而且与Linux标准有些区别，就不深入了。

	12，除了上述，特么还有其他一些不同操作系统的不同实现方法，这里也不深入了。

	13，返回用户态
		系统调用的返回值，有自己的约定标准：
		负值表示错误，正值和0表示成功返回。
		这跟普通用户程序类似。

		但是内核实际做很不少事情：
		内核定了很多错误码，而且每个错误码的数字都是正值，返回给用户却是负值，这是因为，
		在返回的时候，增加了负号。这是内核的惯例。


	14，系统调用也可能导致内核空间访问用户空间的虚拟内存地址，
		比如参数超过6个，就需要用户空间的内存指针，系统调用返回大量的数据，也需要能够内存
		交换数据，也就是正常流程没办法满足需求了，那么这个问题怎么处理？
		答：借助寄存器传递指针，并且用户空间需要__user属性标志，来支持C check tools对源代码
		的自动化检测，这个工具是Linus本人设计的。
		简单的说，内核直接访问用户内存空间地址是可以做到的，需要一些特殊的处理。

	15，strace本身也是基于一个系统调用ptrace来执行。











