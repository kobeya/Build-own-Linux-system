【一、导读】
	1，cpu能耗的基本原理
	2，指令功耗
	3，能耗与频率的关系
	4，其他因素
	参考https://zhuanlan.zhihu.com/p/35120669


【二、正文】
	1，CPU能耗基本原理

		首先，我们知道CPU的本质就是数量庞大的晶体管组成的，CPU的工作，
		就是各种晶体管组合下的工作，所以，CPU能耗的本质就是晶体管参与工作的涉及的能耗。


	2，指令功耗，Energy per Instruction，EPI

		每一条指令，在执行的时候，是否涉及调度运算器、访问内存、访问cache、访问什么
		寄存器、要不要写回等等，就决定每一条指令的功能、调度晶体管不一样，
		因此
		每一条指令，由于所要调用的晶体管数量是不一样的，因此每条指令的功耗其实也不一样


		那么指令的功耗到底怎么样？
		从网上找到如下资料，在一条流水线中，各阶段指令的能耗比如下
		1）writeback指令	7%
		2）Execute指令		9%
		3）Issue指令		14%
		4）Memory指令		15%
		5）Decode指令		18%
		6）Fetch指令		37%


		明显，解码指令、预取指令占据大头，执行指令占据很小。
		
		所以，如果有时候我们写一个while循环的时候，
		实际上能耗不会非常大，因为Fetch指令已经做完，后续基本在做Execute指令阶段。

		因此，好像我们理解为什么精简指令ASIC省电，而inter的复杂指令集却功耗比较大的原因之一。
		精简指令的原理是80%的使用场景，使用20%的指令，那么用的指令少，指令缓存到L1 icache
		的概率越大，指令的Fetch等能耗高的阶段就越是少。

		现在inter的CPU也早已经注重EPI，现在的EPI也是慢慢下降了。

	3，能耗与频率的关系
		
			P = CFV^2

		看上去，频率与能耗是正比例，但是实际是这样吗？
		答案是否定的。

		因素-------------------门延迟（Gate Delay）
		简单的说，晶体管的充放电，是有时间延迟的，只有在充放电完成后采样才能保证信号的完整性
		而这个充放电的时间和电压 负相关，电压越高，充放电时间就越小。
		
		假设，晶体管在某个频率下可以稳定工作，此时电压也是固定的。
		如果增加频率，晶体管反转过快，导致门延迟跟不上了，信号完整性的采集就会出现问题，
		这也是为什么频率超过某个阶段就会不稳定，随机出错的原因。
		那么怎么办呢？

		加大电压，减小门延迟时间，跟上频率的提升。

		因此，频率增加的时候，电压值也不得不同样增加以维持晶体管的稳定性。

	4，其他因素
		这部分用其他的章节继续分解





		

	
