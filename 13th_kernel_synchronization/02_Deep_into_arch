本章主要深入研究内核同步——锁与进程间通讯的联系
【概述】
	1，控制机制之竞态条件、临界区
	2，内核锁机制之
		原子操作、自旋锁、信号量、RCU、内存和优化屏障、读写锁、大内核锁、互斥量
		近似的per-CPU计数器、锁竞争与细粒度锁
	3，System V进程间通讯以及其他一些IPC中与锁的联系


【一、内核锁机制】

	1，竞态条件
		几个进程在访问资源的时候，出现彼此干扰的情况，通常称之为 竞态条件。

bug1	2，我在第一章描述到信号量是1968年设计的，奇怪的是，在<深入Linux内核架构>这本书中，
		描述的是1965年设计，这个留一个flag。

	3，RCU	Read-Copy-Update
		在2002年10月份的2.5版本开发期间添加的同步机制。
		参考资料
		https://zhuanlan.zhihu.com/p/89439043
		https://www.cnblogs.com/qcloud1001/p/7755331.html
		https://blog.51cto.com/3592063/1436267
		https://blog.csdn.net/ustc_dylan/article/details/4049647
		https://blog.csdn.net/xueli1991/article/details/51741763
		https://lwn.net/Articles/262464/
		https://en.wikipedia.org/wiki/Read-copy-update
		kernel/documamtation/rcu

		前面第一章的时候，我描述了几种读写锁，
		在这之前，可能会认为顺序锁，一种可以写的时候，不阻塞读，读的时候不阻塞写
		的机制已经很好了，但是其实我们还有同样优化的同步机制选择——RCU

		在读的时候可以写，在写的时候也可以读。

		通俗的理解RCU原理：
		在一些读多写少的应用环节，比如链表的增删查改，这些接口带有关键字rcu_
		它允许多个读者同时访问共享数据，随意读。
		但是在更新数据的时候，需要先复制一份副本，在副本上各种修改，直到当前所有的读操作
		完成为止，
		再一次性的替换旧数据，也就是读随意妄为，写延迟更新。


	
	4，近似的per-CPU计数器
		

	5，锁竞争与细粒度锁
		锁的两个原则
		1）必须保护共享数据，也就是临界区的并发
		2）必须考虑对性能的影响尽可能小
	
		
		

